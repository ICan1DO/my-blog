<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Trade0ff&#39;s Blog</title>
    <link>https://ICan1DO.github.io/my-blog/post/</link>
    <description>Recent content in Posts on Trade0ff&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 01 Apr 2021 20:36:13 +0000</lastBuildDate><atom:link href="https://ICan1DO.github.io/my-blog/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Tomcat项目部署</title>
      <link>https://ICan1DO.github.io/my-blog/p/tomcat-setup-webapps/</link>
      <pubDate>Thu, 01 Apr 2021 20:36:13 +0000</pubDate>
      
      <guid>https://ICan1DO.github.io/my-blog/p/tomcat-setup-webapps/</guid>
      <description>Tomcat项目部署 部署方式 直接将项目文件放置在webapps目录下。
/example：项目的访问路径&amp;ndash;&amp;gt;虚拟目录 可将项目打包成.war格式，然后放置本目录下，Tomcat会自动解压 配置conf/sever.xml
在&amp;lt;Host&amp;gt;标签中配置
&amp;lt;Context docBase=&amp;#34;C:\example&amp;#34; path=&amp;#34;/example&amp;#34;&amp;gt; &amp;lt;!--docBase:项目存放的路径 path:虚拟目录--&amp;gt; 在conf/Catalina/localhost中创建xml文件（例如：example.xml）。
&amp;lt;Context docBase=&amp;#34;C:\example&amp;#34;&amp;gt; &amp;lt;!--虚拟目录：xml的文件名称(example)--&amp;gt; 项目目录简介 含静态项目和动态项目
example //项目根目录 |_ WEB-INF |_ web.xml //web项目核心配置文件 |_ classes //放置字节码文件的目录 |_ lib //放置依赖的jar包 </description>
    </item>
    
    <item>
      <title>Java集合</title>
      <link>https://ICan1DO.github.io/my-blog/p/java-set/</link>
      <pubDate>Sun, 14 Mar 2021 17:14:03 +0000</pubDate>
      
      <guid>https://ICan1DO.github.io/my-blog/p/java-set/</guid>
      <description>Java集合 Collection
集合接口层级的底层。Java平台并不提供任何对Collection接口的直接实现，但是提供更加详细的对子接口的实现，诸如Set和List接口。
//基本操作方法 size(); //返回集合中元素个数 isEmpty(); //判断集合是否为空 contains(); //是否包含某个元素 add(); //添加元素，成功返回True remove(); //移除元素 iterator(); //迭代器 hasNext(); //是有含有下一个元素，并且返回下一个元素 collection.removeAll(Collection.singleton()); //Collections.singleton是一个静态工厂方法，返回一个只包含指定元素的不可变的Set集合。例如Collections.Singleton(e)方法返回只包含元素e的Set集合，然后集合c调用removeAll方法删除c中所有元素e的实例。同样，Collections.Singleton(null)方法返回只包含元素null的Set集合，然后集合c调用removeAll方法删除c中所有null元素。 toArray(); //方法主要是作为集合和老的期望输入数组的API之间的桥梁。数组操作允许Collection中的内容被转换到一个数组中去 Set
不能包含重复元素的集合
SortedSet
元素按升序排列的Set。
HashSet
HashSet，将其元素存储在一个哈希表中，它具有最好的性能实现；然而它不保证迭代的顺序。
TreeSet
TreeSet，将其元素存储在一个红黑树中，按元素的值顺序排列；本质上它比HashSet要慢。
LinkedHashSet
LinkedHashSet，是作为一个哈希表实现的，用链表连接这些元素，按元素的插入顺序排列。
List
一个有序的集合。List可以包含重复的元素，并且List中的元素是有序排列的。
ArrayList
通常有较好的性能实现
LinkedList
在一定条件下提供较好的执行性能
Queue
是一个其元素带有先后处理顺序的集合。队列通常（但不是必需的）以一种FIFO（先进先出）的形式管理元素。
Map
一个将键映射到值的对象。Map不能包含重复的键；每个键最多能映射到一个值（值之间可以重复）。
SortMap
映射关系按键的升序排列的Map。</description>
    </item>
    
    <item>
      <title>JavaScript基础</title>
      <link>https://ICan1DO.github.io/my-blog/p/javascrip-base/</link>
      <pubDate>Mon, 08 Mar 2021 13:33:03 +0000</pubDate>
      
      <guid>https://ICan1DO.github.io/my-blog/p/javascrip-base/</guid>
      <description>JavaScript基础 数据类型 原始数据类型（基本数据类型） number：数字。整数/小数/NaN（not a number） string：字符串 boolean：true/false null：false undefined：false 引用数据类型：对象 变量 var 变量名 = 初始化值;
typeof(变量名)：获取变量的数据类型
类型转换 number：0或NaN为false，其他为true string：“”为false，其他为true null：false undefined：false 对象：所有对象都为true 对象 Function方法对象
创建方式
//形参不需要填写数据类型，返回值也可以省略 let fun1=new function(&amp;#34;a&amp;#34;,&amp;#34;b&amp;#34;,&amp;#34;alert(a+b)&amp;#34;); //第一种方式 function fun2(a,b){ alert(a+b); }; //第二种方式 let fun3=function fun(a,b){ alert(a+b); }; //第三种方式 重名及参数相同：方法重名且参数相同，方法会被覆盖。
方法调用：方法调用只与方法的名称有关，和参数列表无关。
传入参数：JS方法声明中有一个隐藏的内置对象（数组：arguments），封装所得的实际参数。
Array数组对象
创建方式
//数组长度可变，若没有赋值，则为undefined let arr1=new Array(1,2,3); //1,2,3 let arr2=new Array(4); //,,, let arr3=[1,2,3,&amp;#34;abc&amp;#34;,true];//1,2,3,abc,true 方法
arr1.join(); //join(参数):按照指定字符串拼接数组。默认&amp;#34;,&amp;#34; arr2.push(); //push()：向数组末尾添加元素。 Data日期对象
创建方式
let date=new Date();//默认美国时间格式 方法
toLocaleString();//toLocaleString()：转换为当地时间格式 getTime();//获取毫秒值，与1970年1月1日比较 Math数学对象</description>
    </item>
    
    <item>
      <title>Hugo博客搭建</title>
      <link>https://ICan1DO.github.io/my-blog/p/hugo-setup/</link>
      <pubDate>Mon, 01 Feb 2021 00:00:00 +0200</pubDate>
      
      <guid>https://ICan1DO.github.io/my-blog/p/hugo-setup/</guid>
      <description>HUGO博客搭建 本博客搭建参照少数派Elizen的文章《使用 Hugo 从 0 到 1 搭建个人博客》
HUGO主题下载：主题	本博客使用的主题为：stack
更换博客主题
按照上述文章搭建完成后，如果需要更换主题，把下载完成的主题解压至博客文件路径，目录*/temes下，文件夹名称可修改，这里博主改为stack。
打开主题文件夹，进入exampleSite，将文件夹内的所有文件复制到伯博客文件夹主目录下并替换（红框中的文件建议必选，其中congfig.yaml主题配置文件）。
回到主目录删除除congfig.yaml外的其他格式配置文件。然后打开文件该文件，修改博客地址、主题文件夹名称（博主为stack）。
其余配置文件信息，参考主题说明文档。stack主题文档地址：https://docs.stack.jimmycai.com/v/zh-cn/
修改完成后，先保存、上传。等待自动化运行完成后，打开博客地址，如果没有问题，即完成博客创建。
如果打开存在未编码完全的情况，请参照下面的步骤。
我们打卡GitHub博客项目，打开.github/workflows
打开***.yml文件，也就是你之前创建的自动化文件。添加extended: true，因为部分主题需要用到hugo的extented版本才可编译成功。
name: Update Hugo on: push: branches: - master # master 更新触发 jobs: build-deploy: runs-on: ubuntu-18.04 steps: - uses: actions/checkout@v2 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: latest extended: true - name: Build run: hugo - name: Deploy uses: peaceiris/actions-gh-pages@v3 with: personal_token: ${{ secrets.personal_token }} # 填写你自己的 personal_token PUBLISH_BRANCH: gh-pages # 推送到当前 gh-pages 分支 PUBLISH_DIR: .</description>
    </item>
    
  </channel>
</rss>
